COSC 101: Homework 4
Instructions

Follow the instructions below to write two short python programs. Download the hw_04.zip file and extract the starter files before you start.

Program 1: Price Drop!

This program consists of two functions as described below. Your solution should be placed in the hw_04_sale.py file.

discount

Write a function discount that takes one parameter, a price in dollars. It returns a "sale version" of the given price, which is the price at a 20% discount, except that the maximum discount applied is $100.

For example:

discount(400) returns 320 (because 20% of 400 is 80)
discount(620.5) returns 520.5 (because 20% of 620.5 is 124.1, which is more than 100)
Note that the input and return type of the discount function should be a number (e.g., a float), not a string with dollar signs.

faresale

Write a function called faresale that takes two parameters.

The first parameter, T, is a list of lists representing a table of airfare prices. Each element in T is a row of the table, and each element in the row is a price. For example, T[3][2] is the airfare (cost of flying) from city 3 to city 2. The following table shows example fares for flights between several imaginary cities:

 	To: City 0	To: City 1	To: City 2	To: City 3
From: City 0	 	$150.00	$200.00	$500.00
From: City 1	$299.00	 	$476.00	$600.00
From: City 2	$275.00	$832.00	 	$300.00
From: City 3	$500.00	$750.00	$1500.00
There are no fares for a flight the departs and arrives at the same city; those entries are represented with the empty string. Other entries are of type float or int, not strings (in particular, there are no dollar sign characters). Therefore, the above table could be represented as T = [ ['', 150, 200, 500], [299, '', 476, 600], [275, 832, '', 300], [500, 750, 1500, ''] ].

The second parameter, C, is a list of integers, which represent city numbers. The fare sale applies only to flights that are departing (flying from) or arriving at (flying to) a city in the list C. So, for example, if the second parameter is the list [1, 3], then a discount is applied to prices in rows 1 and 3 and in columns 1 and 3 of the table.

The function should return a "sale" version of the table, which is a copy of T, where a 20% discount (up to a maximum of $100) is applied to all fares for flights arriving at a city in the list C. The following table shows the resulting sale fares for the above example fares using C = [1, 3]:

 	To: City 0	To: City 1	To: City 2	To: City 3
From: City 0	 	$120.00	$200.00	$400.00
From: City 1	$239.20	 	$380.80	$500.00
From: City 2	$275.00	$732.00	 	$240.00
From: City 3	$400.00	$650.00	$1400.00
Notes:

You should use the discount function you wrote above.
The original table T should not be modified by your function. Your function should return a new list of lists.
The new list of lists should be in the same format as the original table, that is, prices should be of type float or int (not strings with dollar signs), or empty strings when the departure and arrival city are the same.
Be careful not to double-discount fares that depart and arrive at two cities in C.
Program 2: Reverse Guessing Game

A traditional computer guessing game has the computer pick a random number and then asks the user to guess what the number is, providing feedback for each guess that tells the user if the guess is correct, too low, or too high.

However, in this assignment, you will implement a reverse guessing game. In this game, the computer asks the user to think of a number between 1 and 100 (inclusive), and then attempts to guess what it is! It does so by repeatedly printing a guess and asking for feedback from the user about whether the guess is correct, too high, or too low.

Here is an example transcript of such a program:

Think of a number between 1 and 100 and I will guess it.  Press return to start.

I guess 50.
Is this (c)orrect, (h)igh, or (l)ow: h

I guess 25.
Is this (c)orrect, (h)igh, or (l)ow: no
I'm sorry, I didn't understand that.
Is this (c)orrect, (h)igh, or (l)ow: l

I guess 37.
Is this (c)orrect, (h)igh, or (l)ow: c

I won in 3 guesses!
The program will consist of the functions below. Your solution should be placed in the hw_04_guess.py file.

feedback

This function takes no parameters and returns a single letter, either c, h, or l. It displays the prompt:

Is this (c)orrect, (h)igh, or (l)ow:
and asks the user for input. If the entered input does not start with one of the letters c, h, or l (either lowercase or uppercase), an error message is printed and the user is asked for input again. However, if the entered input does start with one of these letters, then the corresponding lowercase letter is returned.

Hint: use str.lower() to convert a string to lowercase.

play_game

This is the main function for the guessing game. It takes no parameters and returns nothing.

The game should start by asking the user to think of a number between 1 and 100. (The assumption is that possible guesses are integers between 1 and 100, inclusive of 1 and 100.) It then asks the user to press enter to start and calls input() to wait for the user to type in something (but doesn't do anything with the entered input).

Then, it repeatedly makes a guess based on the previous feedback. Your strategy should be to guess the midpoint of the range of possible numbers (given the feedback from previous guesses). At the start, the range is 1 to 100, and so the first guess should be 50. The next guess should depend on whether the guess is high (leading to a second guess of 25) or low (leading to a second guess of 75).

The program should print the guess and then call the feedback function to ask the user if the guess is correct, high, or low.

If the user says the guess is correct, print out a message and end the game. The message should include the number of guesses that the program took to get the right number.
If the user says the guess is too high or too low, the program should that that into account when making the next guess.
Autograder/correctness notes:

Your guesses (and the total number of guesses) should be printed as integers, not floats. Any decimal points in the output of your program will confuse the autograder.
The autograder assumes that the first guess you will output (print) is 50 (as described by the instructions above).
The only integers in your program's output (i.e., print statements) after the first time 50 appears should be the guesses and then the number of guesses as the very last integer in the output.
The autograder is not checking for the specific text of your messages other than the value of the guesses and the number of guesses. The logic of how the numbers are changing is the important concept being tested here.
Submission and scoring

Submit your two files, hw_04_sale.py and hw_04_guess.py to gradescope.

This homework assignment is worth a total of 15 points and will be graded according to the following rubric:

Points	Category	Description
2	Correctness of Program 1, discount function	Graded automatically by the Gradescope autograder.
4	Correctness of Program 1, faresale function	Graded automatically by the Gradescope autograder.
2	Correctness of Program 2, feedback function	Graded automatically by the Gradescope autograder.
4	Correctness of Program 2, play_game function	Graded automatically by the Gradescope autograder.
3	Program Design	Comments and docstrings are appropriately included
Good overall structure: main functions call helper functions
Good approach: algorithm is clean, simple, and logically sound
